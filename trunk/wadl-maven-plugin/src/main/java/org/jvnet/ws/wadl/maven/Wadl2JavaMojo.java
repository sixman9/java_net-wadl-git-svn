package org.jvnet.ws.wadl.maven;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.DirectoryScanner;
import org.jvnet.ws.wadl2java.Wadl2Java;

import com.sun.codemodel.JClassAlreadyExistsException;

/**
 * A Maven plugin to generate Java code from WADL descriptions.
 * 
 * @author Wilfred Springer
 * @goal generate
 * @phase generate-sources
 */
public class Wadl2JavaMojo extends AbstractMojo {

    /**
     * The packagename for classes generated by this Mojo.
     * 
     * @parameter
     * @required
     */
    private String packageName;

    /**
     * The target directory, to which all Java code will be generated.
     * 
     * @parameter expression="${basedir}/target/generated-sources/wadl"
     */
    private File targetDirectory;

    /**
     * The directory containing the WADL files.
     * 
     * @parameter expression="${basedir}/src/main/wadl"
     */
    private File sourceDirectory;

    /**
     * The patterns of the files to be included in the transformation.
     * 
     * @parameter expression="*.wadl"
     */
    private String includes;

    /**
     * The names of customization files.
     * 
     * @parameter
     */
    private List<String> customizations;

    /**
     * The current project.
     * 
     * @parameter expression="${project}"
     */
    private MavenProject project;

    /**
     * Autopackaging.
     * 
     * @parameter expression="${autoPackaging}"
     */
    private boolean autoPackaging = true;

    /**
     * A boolean, indicating if the mojo should fail entirely if it fails to
     * generate code from a single WADL file.
     * 
     * @parameter default="false"
     */
    private boolean failOnError;

    public void execute() throws MojoExecutionException, MojoFailureException {
        doExecute(failOnError ? new FailOnErrorPolicy()
                : new LogOnlyErrorPolicy());
    }

    private void doExecute(ErrorPolicy policy) throws MojoExecutionException {
        if (sourceDirectory.exists() && sourceDirectory.canRead()) {
            assureTargetDirExistence();
            String[] matches = getWadlFileMatches();
            Wadl2Java processor = createProcessor();
            for (int i = matches.length - 1; i >= 0; i--) {
                File file = new File(sourceDirectory, matches[i]);
                try {
                    processor.process(file.toURI());
                } catch (JClassAlreadyExistsException jcae) {
                    policy.process(jcae.getExistingClass().fullName()
                            + " already exists.", jcae);
                } catch (Exception e) {
                    policy.process("Failed to generate sources from "
                            + file.getAbsolutePath() + ".", e);
                }
            }
            project.addCompileSourceRoot(targetDirectory.getAbsolutePath());
        }
    }

    /**
     * Returns the WADL files to be processed.
     * 
     * @return The WADL files to be processed, based on the {@link #includes}
     *         Mojo parameter.
     */
    private String[] getWadlFileMatches() {
        String[] patterns = includes.split(",");
        DirectoryScanner scanner = new DirectoryScanner();
        scanner.setBasedir(sourceDirectory);
        scanner.setIncludes(patterns);
        scanner.scan();
        String[] matches = scanner.getIncludedFiles();
        return matches;
    }

    /**
     * Create a new {@link Wadl2Java} processor, based on the Mojo parameters.
     * 
     * @return A new {@link Wadl2Java} instance.
     */
    private Wadl2Java createProcessor() {
        List<File> customizationFiles = null;
        if (customizations != null) {
            customizationFiles = new ArrayList<File>(customizations.size());
            for (String customization : customizations) {
                customizationFiles.add(new File(customization));
            }
        } else {
            customizationFiles = new ArrayList<File>(0);
        }
        Wadl2Java processor = new Wadl2Java(targetDirectory, packageName,
                autoPackaging, customizationFiles);
        return processor;
    }

    /**
     * Verifies if the target directory exists, and if it doesn't exist, creates
     * it.
     * 
     * @throws MojoExecutionException
     *             If it failed to create the target directory.
     */
    private void assureTargetDirExistence() throws MojoExecutionException {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) {
                throw new MojoExecutionException("Failed to create "
                        + targetDirectory.getAbsolutePath());
            }
        }
    }

    private interface ErrorPolicy {

        void process(String message, Throwable cause)
                throws MojoExecutionException;

    }

    private class FailOnErrorPolicy implements ErrorPolicy {

        public void process(String message, Throwable cause)
                throws MojoExecutionException {
            throw new MojoExecutionException(message, cause);
        }

    }

    private class LogOnlyErrorPolicy implements ErrorPolicy {

        public void process(String message, Throwable cause)
                throws MojoExecutionException {
            getLog().error(message, cause);
        }

    }

}
